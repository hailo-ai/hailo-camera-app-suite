ARG hailo_tappas_tag=latest
FROM hailo_tappas_base:${hailo_tappas_tag}

RUN chown ${USERNAME}:${GROUPNAME} ${TAPPAS_WORKSPACE}

# Install basic plugins and build tools
RUN mkdir -p core downloader scripts tools
COPY --chown=${USERNAME}:${GROUPNAME} core/requirements ./core/requirements
COPY --chown=${USERNAME}:${GROUPNAME} scripts/build_scripts/install_pkg_file.sh ./scripts/build_scripts/install_pkg_file.sh

RUN sudo apt-get update && \
    ${TAPPAS_WORKSPACE}/scripts/build_scripts/install_pkg_file.sh core/requirements/basic_plugins.pkg && \
    pip3 install --upgrade pip setuptools wheel 

# Install base GStreamer plugins
RUN sudo add-apt-repository -y ppa:oibaf/graphics-drivers && \
    sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test && \
    sudo apt-get update && \
    ${TAPPAS_WORKSPACE}/scripts/build_scripts/install_pkg_file.sh core/requirements/gstreamer_plugins.pkg && \
    pip3 install --no-cache-dir -r core/requirements/requirements.txt && \
    pip3 install --no-cache-dir -r core/requirements/gstreamer_requirements.txt && \
    # Solution for Ubuntu > 20 which acts weird (we need ninja for `ninja install`) 
    if [ $(lsb_release -r | awk '{print $2}' | awk -F'.' '{print $1}') -ge 20 ]; then \
        sudo pip3 install --no-cache-dir -r core/requirements/requirements.txt; \ 
    fi

# Clone required packages
RUN mkdir -p ${TAPPAS_WORKSPACE}/sources && \
    cd ${TAPPAS_WORKSPACE}/sources && \
    git clone --depth 1 --shallow-submodules -b 0.24.0 https://github.com/xtensor-stack/xtensor.git && \
    git clone --depth 1 --shallow-submodules -b 0.20.0 https://github.com/xtensor-stack/xtensor-blas.git && \
    git clone --depth 1 --shallow-submodules -b 0.7.3 https://github.com/xtensor-stack/xtl.git && \
    git clone --depth 1 --shallow-submodules -b v3.0.0 https://github.com/jarro2783/cxxopts.git && \
    git clone --depth 1 --shallow-submodules -b v1.1.0 https://github.com/Tencent/rapidjson.git && \
    git clone --depth 1 --shallow-submodules -b v2.9.0 https://github.com/pybind/pybind11.git && \
    mkdir -p ${TAPPAS_WORKSPACE}/core/open_source/xtensor_stack/base && \
    mkdir -p ${TAPPAS_WORKSPACE}/core/open_source/xtensor_stack/blas && \
    mkdir -p ${TAPPAS_WORKSPACE}/core/open_source/cxxopts && \
    mkdir -p ${TAPPAS_WORKSPACE}/core/open_source/rapidjson && \
    mkdir -p ${TAPPAS_WORKSPACE}/core/open_source/pybind11 && \
    cp -r xtensor/include/. ${TAPPAS_WORKSPACE}/core/open_source/xtensor_stack/base && \
    cp -r xtensor-blas/include/. ${TAPPAS_WORKSPACE}/core/open_source/xtensor_stack/blas && \
    cp -r xtl/include/. ${TAPPAS_WORKSPACE}/core/open_source/xtensor_stack/base && \
    cp -r cxxopts/include/. ${TAPPAS_WORKSPACE}/core/open_source/cxxopts && \
    cp -r rapidjson/include/. ${TAPPAS_WORKSPACE}/core/open_source/rapidjson && \
    cp -r pybind11/include/. ${TAPPAS_WORKSPACE}/core/open_source/pybind11

# Install opencv 
COPY --chown=${USERNAME}:${GROUPNAME} scripts/build_scripts/install_opencv.sh ./scripts/build_scripts/
RUN ./scripts/build_scripts/install_opencv.sh

# Clone Catch2 required packages
RUN cd ${TAPPAS_WORKSPACE}/sources && \
    git clone --depth 1 --shallow-submodules -b v2.13.7 https://github.com/catchorg/Catch2.git && \
    mkdir -p ${TAPPAS_WORKSPACE}/core/open_source/catch2 && \
    cp -r Catch2/single_include/catch2/. ${TAPPAS_WORKSPACE}/core/open_source/catch2/

# Download required files
ARG target_platform=x86
COPY --chown=${USERNAME}:${GROUPNAME} downloader ./downloader
RUN pip3 install -r downloader/requirements.txt && \
    python3 downloader/main.py $target_platform

# Copy the patches and then compile and install gstreamer plugins that requires patch or lack of apt install
COPY --chown=${USERNAME}:${GROUPNAME} core/patches ./core/patches
COPY --chown=${USERNAME}:${GROUPNAME} scripts/gstreamer/install_gstreamer.sh ./scripts/gstreamer/
RUN ./scripts/gstreamer/install_gstreamer.sh

# Copy the rest of the files
COPY --chown=${USERNAME}:${GROUPNAME} . ./

# Copy and append core features
RUN echo ". ${TAPPAS_WORKSPACE}/core/hailo/hailo_shortcuts.bash" >> ~/.bashrc && \
    sed -i "s/^#force_color_prompt=yes/force_color_prompt=yes/" ~/.bashrc && \
    # Install argcomplete
    pip3 install argcomplete==3.2.2 && \
    mkdir -p $TAPPAS_WORKSPACE/scripts/bash_completion.d && \
    activate-global-python-argcomplete --dest=$TAPPAS_WORKSPACE/scripts/bash_completion.d && \
    echo ". $TAPPAS_WORKSPACE/scripts/bash_completion.d/_python-argcomplete" >> ~/.bashrc && \
    pip3 install -e ${TAPPAS_WORKSPACE}/tools/run_app && \
    pip3 install -e ${TAPPAS_WORKSPACE}/tools/trace_analyzer/dot_visualizer && \
    # Add gsthailo to the path files
    mkdir -p $(python3 -m site --user-site) && \
    echo "$TAPPAS_WORKSPACE/core/hailo/python/" > "$(python3 -m site --user-site)/gsthailo.pth"

# Compile and install Hailo Gstreamer
ARG gst_hailo_build_mode=release
ARG gstreamer_build_dir=${TAPPAS_WORKSPACE}/core/hailo
ARG install_vaapi=false
ARG gcc_version
RUN sudo touch /.dockerenv && (yes N | sudo dpkg -i hailort/hailort_*_$(dpkg --print-architecture).deb) && \
    ./scripts/gstreamer/install_hailo_gstreamer.sh --build-dir $gstreamer_build_dir --build-mode $gst_hailo_build_mode --target-platform $target_platform --gcc-version $gcc_version && \
    if [ "$(uname -m)" = "x86_64" ] && [ -e "tappas-gui/tappas-gui_amd64.deb" ]; then \
        sudo apt-get update; \
        sudo apt-get install -y libnspr4 libsecret-common libsecret-1-0 xdg-utils libnss3 desktop-file-utils; \
        sudo dpkg -i tappas-gui/tappas-gui_amd64.deb; \
    fi && \
    # Break down of the flags:
    #   "skip-vainfo" - There is no option to check if VA-INFO is working on this stage, some environment variables are needed
    #   "log-name" - Don't use the log and instead print the log messages to the screen
    if [ "$install_vaapi" = true ]; then ./scripts/vaapi/install_vaapi.sh --skip-vainfo --log-name none; fi


# pkg-config setup
RUN TAPPAS_VERSION=$(grep -a1 project ${TAPPAS_WORKSPACE}/core/hailo/meson.build | grep version | cut -d':' -f2 | tr -d "', ") && \
    sudo ${TAPPAS_WORKSPACE}/scripts/misc/pkg_config_setup.sh --tappas-workspace ${TAPPAS_WORKSPACE} --tappas-version ${TAPPAS_VERSION}

# Create all new dirs and files with rwx permissions for everybody - needed for shared_dir
RUN echo "umask 000" >> /home/${USERNAME}/.bashrc

# The command to run upon entering container
CMD ["/bin/bash"]
